class Solution {
    public int findKthLargest(int[] nums, int k) {
        int low=0;
        int high=nums.length-1;
        return KthLargest(nums,k,low,high);
    }
    public int KthLargest(int[]nums,int k,int low,int high)
    {
        
        int pivotPoint = getPivot(nums,low,high);
        if(pivotPoint==k-1)
        {
            return nums[pivotPoint];
        }
        else if(pivotPoint < k-1)
        {
            return KthLargest(nums,k,pivotPoint+1,high);
        }
        return KthLargest(nums,k,low,pivotPoint-1);
    }
    public int getPivot(int []nums,int low,int high)
    {
        int pivotElement = nums[high];
        int pivot=low;
        for(int i=low;i<=high;i++)
        {
            if(nums[i]>pivotElement)
            {
                int temp = nums[i];
                nums[i]=nums[pivot];
                nums[pivot]=temp;
                pivot++;
            }
        }
        int temp = nums[high];
        nums[high] = nums[pivot];
        nums[pivot] = temp;

        return pivot;
    }
}
